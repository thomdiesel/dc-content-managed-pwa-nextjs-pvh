"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var RenderContentItem_1 = require("./rendering/coordinators/RenderContentItem");
var GetContentItem_1 = require("./content/coordinators/GetContentItem");
var ContentMapper_1 = require("./content/mapper/ContentMapper");
/**
 * Amplience [Content Delivery API](https://docs.amplience.net/integration/deliveryapi.html?h=delivery) client.
 *
 * This client is intended to be used by end user applications to fetch content so that it can be displayed to users.
 *
 * You must provide some basic account information in order to create an instance of ContentClient.
 *
 * Example:
 *
 * ```typescript
 * const client = new ContentClient({
 *    account: 'test'
 * });
 * ```
 *
 * You may override other settings when constructing the client but if no additional configuration is provided sensible defaults will be used.
 */
var ContentClient = /** @class */ (function () {
    /**
     * Creates a Delivery API Client instance. You must provide a configuration object with the account you wish to fetch content from.
     * @param config Client configuration options
     */
    function ContentClient(config) {
        this.config = config;
        if (!config) {
            throw new TypeError('Parameter "config" is required');
        }
        if (!config.account) {
            throw new TypeError('Parameter "config" must contain a valid "account" name');
        }
        if (config.stagingEnvironment &&
            config.stagingEnvironment.indexOf('://') !== -1) {
            throw new TypeError('Parameter "stagingEnvironment" should be a hostname not a URL');
        }
        this.contentClient = this.createContentClient(config);
        this.contentMapper = this.createContentMapper(config);
    }
    /**
     * This function will load a Content Item or Slot by id and return a Promise of the result.
     * If the content is not found the promise will reject with an error.
     * If the content is found the promise will resolve with a parsed version of the content with all dependencies.
     *
     * The content body will match the format defined by your content type, however keep in mind that if you have evolved your content type some published content may still be in the older format.
     *
     * Some pre-processing is applied to the content body to make it easier to work with:
     *
     * * Linked content items are joined together into the root content item to create a single JSON document.
     * * Media references (images and videos) are replaced with wrapper objects [[Image]] and [[Video]] which provide helper functions.
     * * Content created using V1 of the CMS will be upgraded to the V2 format.
     *
     * You can convert the content back to plain JSON by calling the toJSON() function on the returned ContentItem.
     * @typeparam T The type of content returned. This is optional and by default the content returned is assumed to be “any”.
     * @param id Unique id of the Content Item or Slot to load
     */
    ContentClient.prototype.getContentItem = function (contentItemId) {
        return new GetContentItem_1.GetContentItem(this.config, this.contentClient, this.contentMapper).getContentItem(contentItemId);
    };
    /**
     * Converts a Content Item or Slot into a custom format (e.g. HTML / XML) by applying a template server side.
     * @param contentItemId Unique id of the Content Item or Slot to convert using the rendering service
     * @param templateName Name of the template to render the content item or slot with. The template must be setup in your account
     * @param customParameters Custom parameters which will be sent to the rendering API and made avaliable to your template
     */
    ContentClient.prototype.renderContentItem = function (contentItemId, templateName, customParameters) {
        return new RenderContentItem_1.RenderContentItem(this.config, this.contentClient).renderContentItem(contentItemId, templateName, customParameters);
    };
    /**
     * Create network client to make requests to the content delivery service
     * @param config
     */
    ContentClient.prototype.createContentClient = function (config) {
        var client = axios_1.default.create({
            adapter: config.adaptor
        });
        if (config.stagingEnvironment) {
            client.defaults.baseURL = "https://" + config.stagingEnvironment;
        }
        else {
            client.defaults.baseURL = config.baseUrl || 'https://c1.adis.ws';
        }
        return client;
    };
    /**
     * Creates a parser which converts content JSON into classes and objects used by the SDK
     * @param config
     */
    ContentClient.prototype.createContentMapper = function (config) {
        return new ContentMapper_1.ContentMapper(config);
    };
    return ContentClient;
}());
exports.ContentClient = ContentClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGVudENsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvQ29udGVudENsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLGdEQUE2QztBQUU3QyxnRkFBK0U7QUFHL0Usd0VBQXVFO0FBQ3ZFLGdFQUErRDtBQUUvRDs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUNIO0lBSUU7OztPQUdHO0lBQ0gsdUJBQTZCLE1BQTJCO1FBQTNCLFdBQU0sR0FBTixNQUFNLENBQXFCO1FBQ3RELElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxNQUFNLElBQUksU0FBUyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7U0FDdkQ7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUNuQixNQUFNLElBQUksU0FBUyxDQUNqQix3REFBd0QsQ0FDekQsQ0FBQztTQUNIO1FBRUQsSUFDRSxNQUFNLENBQUMsa0JBQWtCO1lBQ3pCLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQy9DO1lBQ0EsTUFBTSxJQUFJLFNBQVMsQ0FDakIsK0RBQStELENBQ2hFLENBQUM7U0FDSDtRQUVELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7OztPQWdCRztJQUNILHNDQUFjLEdBQWQsVUFDRSxhQUFxQjtRQUVyQixPQUFPLElBQUksK0JBQWMsQ0FDdkIsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsYUFBYSxFQUNsQixJQUFJLENBQUMsYUFBYSxDQUNuQixDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCx5Q0FBaUIsR0FBakIsVUFDRSxhQUFxQixFQUNyQixZQUFvQixFQUNwQixnQkFBMkM7UUFFM0MsT0FBTyxJQUFJLHFDQUFpQixDQUMxQixJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxhQUFhLENBQ25CLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRDs7O09BR0c7SUFDTywyQ0FBbUIsR0FBN0IsVUFBOEIsTUFBMkI7UUFDdkQsSUFBTSxNQUFNLEdBQUcsZUFBSyxDQUFDLE1BQU0sQ0FBQztZQUMxQixPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU87U0FDeEIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxNQUFNLENBQUMsa0JBQWtCLEVBQUU7WUFDN0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsYUFBVyxNQUFNLENBQUMsa0JBQW9CLENBQUM7U0FDbEU7YUFBTTtZQUNMLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLElBQUksb0JBQW9CLENBQUM7U0FDbEU7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQ7OztPQUdHO0lBQ08sMkNBQW1CLEdBQTdCLFVBQThCLE1BQTJCO1FBQ3ZELE9BQU8sSUFBSSw2QkFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFDSCxvQkFBQztBQUFELENBQUMsQUFwR0QsSUFvR0M7QUFwR1ksc0NBQWEifQ==