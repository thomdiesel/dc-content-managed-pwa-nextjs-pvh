"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var Url_1 = require("../utils/Url");
/**
 * Default StagingEnvironmentFactoryConfig values
 */
var DefaultStagingEnvironmentFactoryConfig = {
    baseUrl: 'https://virtual-staging.adis.ws'
};
/**
 * Amplience [Virtual Staging Environment](https://docs.amplience.net/virtualstaging/virtualstagingintro.html?h=vse) factory.
 *
 * This factory is intended to be used by end user applications to preview content for a given snapshotID or at a given timestamp.
 *
 * It works by passing the virtual staging environment domain and the snapshotID or timestamp to the virtual-staging API,
 * which will return a new domain that can be used in the ContentClient.
 *
 * Example:
 *
 * ```typescript
 * const factory = new StagingEnvironmentFactory('11122222gggg232gg32g32g.staging.bigcontent.io');
 * const stagingEnvironmentWithSnapshot = await factory.generateDomain({snapshotId: 'abcdef123456'});
 *
 * const client = new ContentClient({
 *   account: 'test',
 *   stagingEnvironment: stagingEnvironmentWithSnapshot
 * });
 *
 * ```
 *
 * You may override other settings when constructing the client but if no additional configuration is provided sensible defaults will be used.
 */
var StagingEnvironmentFactory = /** @class */ (function () {
    /**
     * Creates a StagingEnvironmentFactory instance.
     * @param string stagingEnvironment
     * @param config Client configuration options
     */
    function StagingEnvironmentFactory(stagingEnvironment, config) {
        if (config === void 0) { config = {}; }
        this.stagingEnvironment = stagingEnvironment;
        this.client = this.createClient(__assign({}, DefaultStagingEnvironmentFactoryConfig, config));
    }
    /**
     * Generates a new staging environment domain name using the snapshotId and/or timestamp thats supplied in the options argument
     * @param options
     */
    StagingEnvironmentFactory.prototype.generateDomain = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        url = this.buildUrl(options);
                        return [4 /*yield*/, this.client.get(url)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        err_1 = _a.sent();
                        throw new Error("An error occurred whilst attempting to generate a staging environment domain using options '" + JSON.stringify(options) + "': " + err_1.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Build the URL to invoke using the supplied GenerateDomainOptions
     * @param options GenerateDomainOptions
     */
    StagingEnvironmentFactory.prototype.buildUrl = function (options) {
        var queryParameters = Object.entries(options).map(function (_a) {
            var key = _a[0], value = _a[1];
            return [
                key,
                value.toString()
            ];
        });
        var queryString = Url_1.encodeQueryString(queryParameters);
        return "/domain/" + this.stagingEnvironment + "?" + queryString;
    };
    /**
     * Create network client to make requests to the vse service
     * @param config
     */
    StagingEnvironmentFactory.prototype.createClient = function (config) {
        var client = axios_1.default.create({
            adapter: config.adaptor
        });
        client.defaults.baseURL = config.baseUrl;
        return client;
    };
    return StagingEnvironmentFactory;
}());
exports.StagingEnvironmentFactory = StagingEnvironmentFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhZ2luZ0Vudmlyb25tZW50RmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvc3RhZ2luZy1lbnZpcm9ubWVudC9TdGFnaW5nRW52aXJvbm1lbnRGYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGdEQUE2QztBQUM3QyxvQ0FBaUQ7QUFJakQ7O0dBRUc7QUFDSCxJQUFNLHNDQUFzQyxHQUFvQztJQUM5RSxPQUFPLEVBQUUsaUNBQWlDO0NBQzNDLENBQUM7QUFFRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXNCRztBQUNIO0lBR0U7Ozs7T0FJRztJQUNILG1DQUNtQixrQkFBMEIsRUFDM0MsTUFBNEM7UUFBNUMsdUJBQUEsRUFBQSxXQUE0QztRQUQzQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQVE7UUFHM0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxjQUMxQixzQ0FBc0MsRUFDdEMsTUFBTSxFQUNULENBQUM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0csa0RBQWMsR0FBcEIsVUFBcUIsT0FBOEI7Ozs7Ozs7d0JBRXpDLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO3dCQUNsQixxQkFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBUyxHQUFHLENBQUMsRUFBQTs7d0JBQTdDLFFBQVEsR0FBRyxTQUFrQzt3QkFDbkQsc0JBQU8sUUFBUSxDQUFDLElBQUksRUFBQzs7O3dCQUVyQixNQUFNLElBQUksS0FBSyxDQUNiLGlHQUErRixJQUFJLENBQUMsU0FBUyxDQUMzRyxPQUFPLENBQ1IsV0FBTSxLQUFHLENBQUMsT0FBUyxDQUNyQixDQUFDOzs7OztLQUVMO0lBRUQ7OztPQUdHO0lBQ08sNENBQVEsR0FBbEIsVUFBbUIsT0FBOEI7UUFDL0MsSUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxFQUFZO2dCQUFYLFdBQUcsRUFBRSxhQUFLO1lBQU0sT0FBQTtnQkFDcEUsR0FBRztnQkFDSCxLQUFLLENBQUMsUUFBUSxFQUFFO2FBQ2pCO1FBSHFFLENBR3JFLENBQUMsQ0FBQztRQUNILElBQU0sV0FBVyxHQUFHLHVCQUFpQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sYUFBVyxJQUFJLENBQUMsa0JBQWtCLFNBQUksV0FBYSxDQUFDO0lBQzdELENBQUM7SUFFRDs7O09BR0c7SUFDTyxnREFBWSxHQUF0QixVQUNFLE1BQXVDO1FBRXZDLElBQU0sTUFBTSxHQUFHLGVBQUssQ0FBQyxNQUFNLENBQUM7WUFDMUIsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPO1NBQ3hCLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDekMsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUNILGdDQUFDO0FBQUQsQ0FBQyxBQTlERCxJQThEQztBQTlEWSw4REFBeUIifQ==