import { ContentClientConfig } from '../../ContentClientConfig';
import { AxiosInstance } from 'axios';
import { ContentItem } from '../model/ContentItem';
import { ContentBody } from '../model/ContentBody';
import { ContentMapper } from '../mapper/ContentMapper';
/**
 * @hidden
 */
export declare class GetContentItem {
    private readonly config;
    private readonly contentClient;
    private readonly mapper;
    constructor(config: ContentClientConfig, contentClient: AxiosInstance, mapper: ContentMapper);
    getContentItem<T extends ContentBody>(id: string): Promise<ContentItem<T>>;
    getUrl(query: any): string;
    /**
     * Convert plain content JSON into ContentItem instamce
     * @param content
     */
    hydrateContentItem<T extends ContentBody>(content: any): ContentItem<T>;
    /**
     * Pre-processes the response to create a single content item object
     * with all linked content items inlined.
     * @param data Response from content query API
     */
    processResponse(data: any): any[];
    /**
     * Content produced by older versions do not include _meta.schema.
     * This function inserts those values to normalize the output
     */
    upgradeLegacyContent(node: any): any;
    /**
     * Injects additional meta data which is lost by removing
     * the JSON-LD properties
     */
    injectMetaData(node: any): any;
    /**
     * JSON-LD keywords are just for delivery payload
     */
    removeJsonLD(node: any): any;
}
